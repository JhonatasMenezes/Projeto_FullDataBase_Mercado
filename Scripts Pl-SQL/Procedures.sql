-- PROCEDURES 

-- DML TABELA PRODUTOS
CREATE OR REPLACE PROCEDURE PRC_DML_PROD 
(P_ID IN produtos.id_prod%TYPE, P_NOME IN produtos.nome%TYPE, 
 P_VALOR IN produtos.valor%TYPE, P_QTD IN produtos.quantidade%TYPE,
 P_DESC IN produtos.descricao%TYPE, P_SETOR IN produtos.cod_setor %TYPE,
 P_COMANDO CHAR
 ) IS
    
 V_COMANDO NUMBER;
 
BEGIN
 SELECT COUNT(1)
 INTO V_COMANDO
 FROM PRODUTOS
 WHERE ID_PROD = P_ID;
 
 
-- TOMADA DE DECISÃO
    IF V_COMANDO = 0 THEN 
        INSERT INTO PRODUTOS 
                (NOME, VALOR, QUANTIDADE, DESCRICAO, COD_SETOR) 
        VALUES  (P_NOME, P_VALOR, P_QTD, P_DESC, P_SETOR);
        DBMS_OUTPUT.put_line('INSERIDO O PRODUTO '|| P_NOME||' COM SUCESSO');
    ELSIF V_COMANDO = 1 AND P_COMANDO = 'U' THEN
        IF P_QTD > 0 THEN 
            UPDATE PRODUTOS
            SET NOME = P_NOME,
                VALOR = P_VALOR,
                QUANTIDADE = (SELECT QUANTIDADE + P_QTD 
                              FROM PRODUTOS
                              WHERE ID_PROD = P_ID),
                DESCRICAO = P_DESC,
                COD_SETOR = P_SETOR
            WHERE ID_PROD =  P_ID;
        ELSIF P_QTD < 0 THEN
            UPDATE PRODUTOS
            SET NOME = P_NOME,
                VALOR = P_VALOR,
                QUANTIDADE = (SELECT QUANTIDADE + P_QTD 
                              FROM PRODUTOS
                              WHERE ID_PROD = P_ID),
                DESCRICAO = P_DESC,
                COD_SETOR = P_SETOR
            WHERE ID_PROD =  P_ID;
        END IF;
        DBMS_OUTPUT.put_line('ATUALIZADO PRODUTO '|| P_ID||' COM SUCESSO');
    ELSIF V_COMANDO = 1 AND P_COMANDO = 'D' THEN
        DELETE FROM PRODUTOS
        WHERE ID_PROD = P_ID;
        DBMS_OUTPUT.put_line('DELETADO O PRODUTO '|| P_ID||' COM SUCESSO');
    ELSE 
        DBMS_OUTPUT.put_line('COMANDO INVÁLIDO! TENTE NOVAMENTE!');
    END IF;
    COMMIT;
-- AVISO EM CASO DE ERRO
EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.put_line(SQLERRM);
END;
COMMIT;

-- PARÂMETROS DE EXECUÇÃO
PRC_DML_PROD (P_ID, P_NOME, P_VALOR, P_QTD, P_DESC, P_SETOR, P_COMANDO);



-- DML TABELA CLIENTE
CREATE OR REPLACE PROCEDURE PRC_DML_CLIENTE 
(P_ID IN cliente.id_cliente%TYPE, P_NOME IN cliente.nome%TYPE, 
 P_COD_LOG IN cliente.cod_logradouro%TYPE, P_SEXO IN cliente.sexo%TYPE,
 P_EST_CV IN cliente.est_civil%TYPE, P_NASC IN CLIENTE.NASCIMENTO%TYPE,
 P_DATA_CDT IN CLIENTE.data_cadastro%TYPE, P_DESC IN cliente.desconto%TYPE,
 P_COMANDO CHAR
 ) IS
    
 V_COMANDO NUMBER;
 
BEGIN
 SELECT COUNT(1)
 INTO V_COMANDO
 FROM CLIENTE
 WHERE ID_CLIENTE = P_ID;
 
-- TOMADA DE DECISÃO
    IF V_COMANDO = 0 THEN 
        INSERT INTO CLIENTE 
                (NOME, COD_LOGRADOURO, SEXO, EST_CIVIL, 
                 NASCIMENTO, DATA_CADASTRO, DESCONTO) 
        VALUES  (P_NOME, P_COD_LOG, P_SEXO, P_EST_CV,
                 P_NASC, SYSDATE, P_DESC);
        DBMS_OUTPUT.put_line('INSERIDO O CLIENTE '|| P_NOME||' COM SUCESSO');
    ELSIF V_COMANDO = 1 AND P_COMANDO = 'U' THEN 
            UPDATE CLIENTE
            SET NOME = P_NOME,
                COD_LOGRADOURO = P_COD_LOG,
                SEXO = P_SEXO,
                EST_CIVIL = P_EST_CV,
                NASCIMENTO = P_NASC,
                DATA_CADASTRO = P_DATA_CDT,
                DESCONTO = P_DESC
            WHERE ID_CLIENTE =  P_ID;
        DBMS_OUTPUT.put_line('CLIENTE '|| P_ID||' ATUALIZADO COM SUCESSO');
    ELSIF V_COMANDO = 1 AND P_COMANDO = 'D' THEN
        DELETE FROM CLIENTE
        WHERE ID_CLIENTE = P_ID;
        DBMS_OUTPUT.put_line('DELETADO O CLIENTE '|| P_ID||' COM SUCESSO');
    ELSE 
        DBMS_OUTPUT.put_line('COMANDO INVÁLIDO! TENTE NOVAMENTE!');
    END IF;
    COMMIT;
-- AVISO EM CASO DE ERRO
EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.put_line(SQLERRM);
END;

-- EXECUÇÃO
PRC_DML_CLIENTE(P_ID,P_NOME,P_COD_LOG,P_SEXO,P_EST_CV,P_NASC,P_DATA_CDT,P_DESC,P_COMANDO)

-- DML TABELA LOGRADOURO
CREATE OR REPLACE PROCEDURE PRC_ADD_LOGRADOURO (
P_ID IN logradouro.id_log%TYPE, P_LOG IN logradouro.logradouro%TYPE,
P_NUM IN logradouro.numero%TYPE, P_CEP IN logradouro.cep%TYPE,
P_BAIRRO IN logradouro.cod_bairro%TYPE, P_COMANDO CHAR
) IS
V_VALID NUMBER;

BEGIN
 SELECT COUNT(1) 
 INTO V_VALID
 FROM LOGRADOURO
 WHERE ID_LOG = P_ID;
 
 IF V_VALID = 0 THEN
    INSERT INTO LOGRADOURO (LOGRADOURO, NUMERO, CEP, COD_BAIRRO) 
    VALUES (P_LOG, P_NUM, P_CEP, P_BAIRRO);
    DBMS_OUTPUT.PUT_LINE(P_ID||' ADICIONADO COM SUCESSO!');
    
 ELSIF V_VALID = 1 AND P_COMANDO = 'U' THEN 
    UPDATE LOGRADOURO
    SET LOGRADOURO = P_LOG,
        NUMERO = P_NUM,
        CEP = P_CEP,
        COD_BAIRRO = P_BAIRRO;
    DBMS_OUTPUT.PUT_LINE(P_ID||' ATUALIZADO COM SUCESSO!');    
    
 ELSIF V_VALID = 1 AND P_COMANDO = 'D' THEN
    DELETE FROM LOGRADOURO
    WHERE ID_LOG = P_ID;
 ELSE
    DBMS_OUTPUT.PUT_LINE('COMANDO INVÁLIDO! TENTE NOVAMENTE!');
 END IF;
 
 EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.put_line(SQLERRM);  
END;
--EXECUÇÃO
PRC_ADD_LOGRADOURO (P_ID, P_LOG, P_NUM, P_CEP, P_BAIRRO, P_COMANDO)



-- INSERIR OS PRODUTOS E A QUANTIDADE
CREATE OR REPLACE PROCEDURE PRC_LISTA_PROD (
P_ID IN lista_produtos.cod_nota%TYPE, 
P_PROD IN lista_produtos.cod_produto%TYPE,
P_QTD NUMBER
) IS 

V_PORC_DESC    NUMBER(4,2);
V_VALOR_C_DESC NUMBER(8,2);
V_DESC_TOTAL   NUMBER(8,2);

BEGIN

 SELECT PORC_DESCONTO
 INTO V_PORC_DESC
 FROM SETOR
 WHERE ID_SETOR =(SELECT COD_SETOR
        FROM PRODUTOS
        WHERE ID_PROD = P_PROD);

 SELECT VALOR - (VALOR * V_PORC_DESC)
 INTO V_VALOR_C_DESC
 FROM PRODUTOS
 WHERE ID_PROD = P_PROD;

 SELECT VALOR * V_PORC_DESC
 INTO V_DESC_TOTAL
 FROM PRODUTOS
 WHERE ID_PROD = P_PROD;

 FOR DD IN 1..P_QTD LOOP  
 INSERT INTO LISTA_PRODUTOS (COD_NOTA, COD_PRODUTO, DESC_TOTAL, VALOR_C_DESC)
 VALUES (P_ID, P_PROD, V_DESC_TOTAL,
         V_VALOR_C_DESC);
                 
 END LOOP;
 
 UPDATE PRODUTOS
 SET QUANTIDADE = (SELECT QUANTIDADE - P_QTD 
                   FROM PRODUTOS
                   WHERE ID_PROD = P_PROD)
 WHERE ID_PROD =  P_ID;

EXCEPTION WHEN OTHERS THEN
dbms_output.put_line(SQLERRM);

END;
-- EXECUÇÃO
PRC_LISTA_PROD(P_ID,P_PROD,P_QTD)


-- GERAR O PEDIDO DA COMPRA
CREATE OR REPLACE PROCEDURE PRC_PEDIDOS(
P_ID IN lista_produtos.cod_nota%TYPE
)IS 

V_QTD NUMBER;
V_VAL_S_DESC NUMBER(8,2);

V_VALID NUMBER;

BEGIN

 SELECT COUNT(1)
 INTO V_VALID
 FROM PEDIDOS
 WHERE ID_PEDIDO = P_ID;
 
 SELECT COUNT(1)
 INTO V_QTD
 FROM LISTA_PRODUTOS
 WHERE COD_NOTA = P_ID;
 DBMS_OUTPUT.PUT_LINE(V_QTD);
 

 SELECT SUM(VALOR) * V_QTD
 INTO V_VAL_S_DESC
 FROM PRODUTOS
 WHERE ID_PROD = (SELECT DISTINCT(COD_PRODUTO) 
                  FROM lista_produtos
                  WHERE COD_NOTA = P_ID);
 
 IF V_VALID = 0 THEN 
    INSERT INTO PEDIDOS (ID_PEDIDO, QTD_PROD, VALOR_S_DESC)
    VALUES (P_ID, V_QTD, V_VAL_S_DESC);

 ELSE
    dbms_output.put_line('NÚMERO DE PEDIDO JÁ EXISTENTE!');
 END IF;

END;
-- EXECUÇÃO
PRC_PEDIDOS (P_ID)


-- NOTA FISCAL E PREENCHIMENTO DAS TABELAS SECUNDÁRIAS
CREATE OR REPLACE PROCEDURE PRC_COMPRA (
P_PEDIDO pedidos.id_pedido%TYPE, P_VEND IN nota_fiscal.vendedor%TYPE, 
P_LOJA IN nota_fiscal.cod_loja%TYPE, P_CLIENTE IN nota_fiscal.cod_cliente%TYPE,
P_VAL_PAG IN nota_fiscal.valor_pago%TYPE 
) IS

V_QTD_PROD nota_fiscal.qtd_produto%TYPE;
V_TOT_S_DESC nota_fiscal.total_s_desc%TYPE;
V_TOT_DESC   nota_fiscal.total_desc%TYPE;
V_VALOR_FINAL  nota_fiscal.valor_final%TYPE;

V_DESC_CLIENTE cliente.desconto%TYPE;

BEGIN

 SELECT NVL(DESCONTO, 0)
 INTO V_DESC_CLIENTE
 FROM CLIENTE
 WHERE ID_CLIENTE = P_CLIENTE;

 SELECT COUNT(1)
 INTO V_QTD_PROD
 FROM lista_produtos
 WHERE cod_nota = P_PEDIDO;

 SELECT VALOR_S_DESC
 INTO V_TOT_S_DESC
 FROM PEDIDOS
 WHERE id_pedido = P_PEDIDO;
 
 SELECT SUM(DESC_TOTAL) + (V_TOT_S_DESC * V_DESC_CLIENTE)
 INTO V_TOT_DESC
 FROM lista_produtos
 WHERE cod_nota = P_PEDIDO; 
 
 IF V_DESC_CLIENTE = 0 THEN
    UPDATE CLIENTE 
    SET DESCONTO = 0.02
    WHERE ID_CLIENTE = P_CLIENTE;
 ELSIF V_DESC_CLIENTE = 0.02 THEN
    UPDATE CLIENTE 
    SET DESCONTO = DESCONTO + 0.02
    WHERE ID_CLIENTE = P_CLIENTE;
 ELSIF V_DESC_CLIENTE = 0.04 THEN
    UPDATE CLIENTE 
    SET DESCONTO = DESCONTO + 0.02
    WHERE ID_CLIENTE = P_CLIENTE;   
 ELSIF V_DESC_CLIENTE = 0.06 THEN
    UPDATE CLIENTE 
    SET DESCONTO = DESCONTO + 0.02
    WHERE ID_CLIENTE = P_CLIENTE;
 ELSIF V_DESC_CLIENTE = 0.08 THEN
    UPDATE CLIENTE 
    SET DESCONTO = DESCONTO + 0.02
    WHERE ID_CLIENTE = P_CLIENTE;
 END IF;
 
 SELECT SUM(VALOR_C_DESC) - (SUM(VALOR_C_DESC) * V_DESC_CLIENTE)
 INTO V_VALOR_FINAL
 FROM LISTA_PRODUTOS
 WHERE cod_nota = P_PEDIDO;

 INSERT INTO NOTA_FISCAL 
 (ID_NOTA, VENDEDOR, COD_LOJA, COD_CLIENTE, QTD_PRODUTO,
  TOTAL_S_DESC, TOTAL_DESC, VALOR_FINAL, VALOR_PAGO, DATA_COMPRA) 
 VALUES
 (P_PEDIDO, P_VEND, P_LOJA, P_CLIENTE, V_QTD_PROD, 
  V_TOT_S_DESC, V_TOT_DESC, V_VALOR_FINAL, P_VAL_PAG, SYSDATE);
 
 INSERT INTO VENDAS_GERAIS (COD_LOJA, COD_NOTAF, DATA_VENDA)
 VALUES (P_LOJA, P_PEDIDO, SYSDATE);


COMMIT;
 DBMS_OUTPUT.PUT_LINE('======================');
 DBMS_OUTPUT.PUT_LINE('      REDE MAIS       ');
 DBMS_OUTPUT.PUT_LINE('======================');
 DBMS_OUTPUT.PUT_LINE('     NOTA FISCAL      ');
 DBMS_OUTPUT.PUT_LINE(TO_DATE(SYSDATE, 'DD/MM/YYYY, HH24:MI:SS'));
 DBMS_OUTPUT.PUT_LINE('FORAM '||V_QTD_PROD||' PRODUTOS ADQUIRIDOS');
 DBMS_OUTPUT.PUT_LINE('SEU DESCONTO FIDELIDADE||
 ATUAL É DE: '||V_DESC_CLIENTE||'%');
 DBMS_OUTPUT.PUT_LINE('VALOR SEM DESCONTO: '||TO_CHAR(V_TOT_S_DESC, '$999,999.99'));
 DBMS_OUTPUT.PUT_LINE('VALOR DO DESCONTO: '||TO_CHAR(V_TOT_DESC, '$999,999.99'));
 DBMS_OUTPUT.PUT_LINE('=======================');
 DBMS_OUTPUT.PUT_LINE('VALOR TOTAL: '||TO_CHAR(V_VALOR_FINAL, '$999,999.99'));
 DBMS_OUTPUT.PUT_LINE('VALOR PAGO: '||TO_CHAR(P_VAL_PAG, '$999,999.99'));
 DBMS_OUTPUT.PUT_LINE('=======================');
 DBMS_OUTPUT.PUT_LINE('    VOLTE SEMPRE!!!    ');
 
EXCEPTION WHEN OTHERS THEN 
DBMS_OUTPUT.PUT_LINE(SQLERRM);

END;
-- EXECUÇÃO
PRC_COMPRA(ID PEDIDO, VENDEDOR, ID LOJA, ID CLIENTE, VALOR PAGO)

-- FIM DA CRIAÇÃO DAS AUTOMAÇÕES, AGORA É HORA DE VER SE ESTÁ TUDO FUNCIONANDO
